# Eureka Server URL
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/
spring.application.name=API-GATEWAY
server.port=9191

# 1. Manual registration
# By using this approach we don't have to add the microservice name in the URL:
# ex: http://localhost:9191/api/departments/IT001
# ex: http://localhost:9191/api/employees/1

## Routes for Employee Service
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**

## Routes for Department Service
spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

# 2. Automatic registration (using discovery locator)
# By using this property we don't have to manually register microservices to API Gateway
# But we have to add the microservice name in the URL:
# ex: http://localhost:9191/department-service/api/departments/IT001
# ex: http://localhost:9191/employee-service/api/employees/1
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Enable logging to see details about microservices registration
#logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG

# !!!The recommended approach is the one with manual registration of microservices with the API Gateway!!!